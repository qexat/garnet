-- Check:
--   status: success


/- Another monad-ish attempt, this also gets called map
From modular implicits paper section 3.4

module type Functor = sig
  type + 'a t
  val map : ('a -> 'b) -> 'a t -> 'b t
end
-/

type Functor(@T1, @T2) = struct
    map: fn(@T1) @T2,
end

-- Implement Map for a cell type
type Cell(@V) = struct
    val: @V
end

fn make_cell_functor(f fn(@A) @B) Functor(Cell(@A), Cell(@B)) =
    Functor {
        .map = fn(cell Cell(@A)) Cell(@B) =
            Cell {
                .val = f(cell$.val)
            }
        end
    }
end

fn f(i Bool) I32 =
    12
end

fn main() I32 =
    let test_cell = Cell {
        .val = true
    }
    let thing = make_cell_functor(f)
    let test_result Cell(I32) = thing$.map(test_cell)
    0
end
