--! Simple hashtable implementation.
--!
--! Oy this raises some questions:
--! Generic constraints on methods
--! Self values
--! Borrow/own syntax
--! Iterators
--! todo!() macro equivalent
--! No default methods possible...?
--! Self type is actually kinda necessary, fuck.  How the fuck does 1ML
--! do it?
--! ...how the fuck do we have something like derives?  idk yet.
--! ...We can build some of this out of unsafe pointers.
--!
--! todo: std lib or modules, implicit `: {}` after functions

fn todo(): {} =
    -- TODO, ironically enough: panic
    todo()
end

type Hashtbl[K,V] = struct {
    contents: Vec[{K,V}],
}

fn new(): Hashtbl[K,V] =
    Hashtbl {
        contents: Vec.new(),
    }
end

fn insert(self: Hashtbl[K,V] &uniq, k: K, v: V): Option[V] =
    todo()
end

--- TODO: Ponder get_mut()
fn get(self: Hashtbl[K,V] &, k: K &): Option[V &] =
    todo()
end

--- So we have three types of behavior here...
--- If you uniqely borrow self, you can take and return mutable or borrowed values
--- If you shared borrow self, you can take and return only shared values.
--- If you own self, you can take and return owned, but not mutable or borrowed value.
--- You theoretically could, but they'd outlive the thing they're
--- borrowing from.  Though that's not a guarentee so that seems like
--- it is enforced a step later, not by the generic part but by the borrow
--- checker.
fn get(self: Hashtbl[K,V] ???, k: K &): Option[V ???] =
    todo()
end

fn remove(self: Hashtbl[K,V] &uniq, k: K &): Option[V] =
    todo()
end

fn len(self: Hashtbl[K,V] &): Size =
    todo()
end



--- Based on Rust's std::hash::BuildHasher trait.
--- ...which might be more complex than necessary.
--- I THINK it has to be this way for its random hashtable seeding...?
type BuildHasher = struct {
    -- this must impl trait std::hash::Hasher...  hmmmmm.
    hasher: Type,
    build_hasher: fn(self: Self &): Self.hasher,
}

type Hash = struct {
    hash: fn[H](self: Self &, state: &mut H): {} where H: Hasher,
}

type Hasher = struct {
    finish: fn(self: Self &): U64,
    write: fn(self: Self &uniq), bytes: Slice[u8]): {},
}
