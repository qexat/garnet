--! Basic vector type.
--!
--! TODO:
--! ^ is an unsafe pointer a la Rust
--! ...slices?
--! Conversions of number types
--! Borrow syntax

-- TODO: This is a ref-like type and thus needs a lifetime of some
-- kind...
-- It IS becoming kinda clear that lifetimes need a syntax, and then
-- the borrow/uniq/own syntax needs to be part of that.
type Slice[T] = struct {
    data: T ^mut,
    len: Size,
}

fn len(self: Slice[T]) -> Size =
    self.len
end

-- TODO: get_mut()
fn get(self: Slice[T] borrow, i: Size) -> Option[T borrow] =
    if self.len >= i then
        None
    else
        -- TODO: i needs to be an Offset, not a Size.
        Some(self.data.index(i) borrow)
    end
end


type Vec[T] = struct {
    --data: T ^mut,
    --len: Size,
    data: Slice[T],
    allocator: Allocator ^const,
    capacity: Size,
}

fn new(alloc: Allocator ^const): Vec[T] =
    todo()
end
