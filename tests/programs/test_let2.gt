-- Format:
--   status: success
-- Compile:
--   status: success


type Foo[Thing] = struct[Thing]
    a: Thing,
    b: Bool
end

fn id(|T| x T) T =
    x
end


fn main() {} =
    let f1 = id(|Foo[I32]| Foo(|I32| {
        .a = 3_I32,
        .b = false
    }))

    let f2 = id(|Foo[Bool]| Foo(|Bool| {
        .a = true,
        .b = false
    }))

    -- Now can we infer the type parameters for id() and Foo?

    -- id() has type annotations, type constructor does not
    let f3 = id(|Foo[I32]| Foo {
        .a = 3_I32,
        .b = false
    })
 
    let f4 = id(|Foo[Bool]| Foo {
        .a = true,
        .b = false
    })

    -- type constructor has type annotations, id() does not
    let f5 = id(Foo(|I32| {
        .a = 3_I32,
        .b = false
    }))

    let f6 = id(Foo(|Bool| {
        .a = true,
        .b = false
    }))

    -- Neither have type annotations
    let f7 = id(Foo {
        .a = 3_I32,
        .b = false
    } )
 
    let f8 = id(Foo {
        .a = true,
        .b = false
    } ) 
end
