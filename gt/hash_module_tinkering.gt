--! Thoughts about modules with Rust's hash-related traits
--! as a case study.

--- Should a module def'n look like this?
mod SipHash =
    fn siphash(input: U8 []^, k: U128, out: U8 []^uniq): {}
end

--- Or like this?
mod Hash =
    fn hash(input: U8 []^, k: U128, out: U8 []^uniq): {}
end

--- The SipHash module's signature.
type Hash = struct {
    hash: fn(input: U8 []^, k: U128, out: U8 []^uniq): {}
}

--- Equivalent of Rust's `Hasher` trait
---
--- I'll say this explicitly: If we have a `type` type
--- then we can treat it like a normal value, but any
--- actual instances of it must be in `const` only code,
--- which must be able to be evaluated entirely during
--- compilation.
--- This is basically similar to Zig's `comptime`.
---
--- Random thought: wow, I sure wonder what happens if we have a
--- `type[T]` type.
---
--- (Apparently the answer is "you start getting into
--- higher-kinded-types territory")
type Hasher = struct {
    Self: type,
    write: fn(self: Self ^uniq, bytes: U8 []^),
    finish: fn(self: Self ^): U64,

    -- For now we are not going to worry about the problem of default
    -- functions.
    write_u8: fn(self: Self ^uniq, i: U8) { ... }
    write_u16: fn(self: Self ^uniq, i: U16) { ... }
    write_u32: fn(self: Self ^uniq, i: U32) { ... }
    write_u64: fn(self: Self ^uniq, i: U64) { ... }
    write_u128: fn(self: Self ^uniq, i: U128) { ... }
    write_size: fn(self: Self ^uniq, i: Size) { ... }
    write_i8: fn(self: Self ^uniq, i: I8) { ... }
    write_i16: fn(self: Self ^uniq, i: I16) { ... }
    write_i32: fn(self: Self ^uniq, i: I32) { ... }
    write_i64: fn(self: Self ^uniq, i: I64) { ... }
    write_i128: fn(self: Self ^uniq, i: I128) { ... }
}

--- The state of our hasher
type SipHasher = struct { }

--- impl Hasher for SipHasher...
---
--- For now I won't try to construct any syntactic sugar at all, just
--- write exactly what is going on in the most literal way possible.
---
--- Rust's `self` is MOSTLY syntactic sugar I believe, up until you get
--- into trait objects.
const SIPHASH_IMPL: Hasher = struct {
    Self: SipHasher,
    --- Feed data into hash function
    write: fn(self: Self ^uniq, bytes: U8 []^) =
        ...
    end,

    --- Do the last step of the hash function and return the result
    finish: fn(self: Self ^): U64 =
        ...
    end
}

--- Basic function to take some thing and hash it
fn hash_thing(t: Thing): U64 =
    let thing_bytes: U8[] ^ = magic_as_bytes(thing)
    let hasher: SipHasher ^uniq = SipHasher {} ^uniq
    SIPHASH_IMPL.write(hasher, thing_bytes)
    SIPHASH_IMPL.finish(hasher)
end

--- Ok, that is clunky but perfectly clear, fine.
--- What if we want to hash a thing with a particular Hasher?
--- We have to specify that
fn hash_thing2(hasher: Hasher, t: Thing, hash_state: hasher.Self ^uniq): U64 =
    let thing_bytes: U8[] ^ = magic_as_bytes(thing)
    hasher.write(hash_state, thing_bytes)
    hasher.finish(hash_state)
end

--- Or maybe it looks more rusty with an explicit generic type, like this?
--- This expresses associated types, and kinda does it more
--- comprehensibly than Rust maybe.
fn hash_thing3[HS](hasher: Hasher, t: Thing, hash_state: HS ^uniq): U64
where HS: hasher.Self =
    let thing_bytes: U8[] ^ = magic_as_bytes(thing)
    hasher.write(hash_state, thing_bytes)
    hasher.finish(hash_state)
end

--- Great, how do we call that?
fn call_hash_thing2(t: Thing): U64 =
    let hash_state = SipHasher {} ^uniq
    hash_thing2(SIPHASH_IMPL, t, hash_state)
    -- Oooooor, theoretically someday we build our API so we can do something like:
    SIPHASH_IMPL:hash_thing3(t, hash_state)
    -- But so far we can NOT do something like this without modifying
    -- SipHasher.
    hash_state:hash_thing(t)
    -- OTOH, ML can include modules in each other's definitions, so it
    -- might be easy to just add your hash_thing function to an extended
    -- Hasher impl...
end


/-
COHERENCE:
Huh, that does allow for two different implementations of the same
module/trait, entertainingly.  You just have to always be explicit
about which one you use.  Maybe not super convenient for like, Add.

The Coherence Problem is bigger than that though.  Basically: imagine
making a hashtable that uses one module for the Hash implementation,
then passing it to a function that uses a different module for its Hash
implementation.  They'll use differnt hash algorithms for the same hash
table and break horribly.  This is discussed here:
https://terbium.io/2021/02/traits-typeclasses/

No, I take it back, coherence isn't a problem for ML modules, because it
does make sure the types have to match up.

Oh, suggestion for turbofish syntax that I actually don't hate: foo.bar.[T]()
this disambiguates with array indexing: foo.bar[some_index]()
Or we could use a real turbofish for the lulz: foo.bar::<T>()
Or the robofish: foo.bar::[T]()



Things to read:
Scala / DOT, Scala implicits,
Original typeclass paper: https://web.engr.oregonstate.edu/~walkiner/teaching/cs583-sp21/files/Wadler-TypeClasses.pdf
Typeclass vs. the world: https://youtu.be/hIZxTQP1ifo
Comparing traits and typeclasses: https://terbium.io/2021/02/traits-typeclasses/
Typeclasses: An exploration of design space: https://www.microsoft.com/en-us/research/wp-content/uploads/1997/01/multi.pdf
MixML: https://people.mpi-sws.org/~rossberg/papers/Rossberg,%20Dreyer%20-%20Mixin'%20Up%20the%20ML%20Module%20System.pdf
F-ing modules: https://people.mpi-sws.org/~rossberg/papers/Rossberg,%20Russo,%20Dreyer%20-%20F-ing%20Modules%20[JFP].pdf
1ML: https://people.mpi-sws.org/~rossberg/papers/Rossberg%20-%201ML%20--%20Core%20and%20modules%20united%20[JFP].pdf

Ok, so reasons I want to do modules instead of typeclasses/traits:

 * Unification of everything-is-a-struct
 * Typeclass/trait metaprogramming gets hairy af
 * Still able to compile to static dispatch
 * **This lang has to be simpler than Rust**

Key points from typeclass vs. the world:

 * Typeclasses can be done with static dispatch (though the original
   paper kinda implies dynamic dispatch)
 * Rust's Self is just syntactic sugar
 * The annoying `impl<T> MyTrait for T {}` syntax may be avoidable by
   decorating type variables so you know they're type variables instead
   of just typos: `impl MyTrait for @T {}`
 * Best description I've seen of generics vs associated types in traits:
   Generics are types set by the caller, associated types are types set
   by the impl.  You can kinda do without them but it gets damn
   squirrelly.  Haskell doesn't have em, but there's a couple different
   extensions that do something similar.
 * Having generics in associated types gets you into higher-kinded types
-/

-- FINE let's just implement a simple lookup table thing and see what happens.

--- Trait Eq
--- We don't bother with PartialEq atm
type EQ = struct {
    -- Rust's PartialEq trait lets Lhs and Rhs to be different,
    -- but by default they are the same so we're gonna do that
    -- for now because it makes the Map module simpler
    --Lhs: type,
    --Rhs: type,
    Self: type,
    eq: fn(lhs: Self ^, rhs: Self ^): Bool,
    ne: fn(lhs: Self ^, rhs: Self ^): Bool = not eq(rhs, lhs) end,
}

--- Loosely from 1ML paper page 11
--- "trait definition" for associative array.
type MAP = struct {
    Key: type,
    --- Do we need a way to specify Val everywhere here?
    Map[Val]: type,
    empty[Val]: fn(): Map[Val],
    lookup[Val]: fn(Map[Val] ^, Key): Option[Val],
    add[Val]: fn(Map[Val] ^uniq, Key, Val),
}

--- Implementation...
--- Their signature is `Map (Key : EQ) :> MAP where (type .key = Key.t)`
--- and the .key = Key.t seems redundant with what we're already
--- writing?
---
--- They apparently define a "map" that is just a cell of one value,
--- which doesn't seem very useful to me, so I'm gonna write it to be
--- an assoc list in a theoretical Vec type, and make it more Rusty with
--- mutable references and such.
/-
Similarly, MAP defines a signature with abstract key and map types. The Map function is
a functor: it takes a value of type EQ, i.e., a module. From that it constructs a naive imple-
mentation of maps. “X:>T ” is the usual sealing operator that opaquely ascribes a type (i.e.,
signature) to a value (here, a module). The type refinement syntax “T where (type .X=T )”
should be familiar from ML, but here it actually is derived from a more general construct:
“T where (.X:U)” refines T ’s subcomponent at path .X to type U, which can be any
subtype of what’s declared by T . That form subsumes module sharing as well as other
forms of refinement, with some appropriate sugar defined in Figure 2.

From PL discord:

icefox — Today at 12:32 PM
it already contains type key = Key.t in the module itself so I have no idea why repeating it in the signature is necessary

leaf — Today at 12:35 PM
it's so that that definition is available at type-checking time
if the functor were defined as Map (Key : EQ) :> MAP and you instantiated it with some K : EQ to get Map(K), the typechecker would just see Map(K).key as some abstract type with no relation to K.t
so for example if you wanted to make a map with strings as keys and wrote M = Map(String); M.insert "blah" ... the typechecker would yell at you
because it can't deduce that "blah" has type Map(String).key

icefox — Today at 12:38 PM
Why not just look at the definition to see what Map(K).key is set to?
Oh it lets you define which types in the module are opaque and which aren't? (edited)

leaf — Today at 12:38 PM
right, looking into the definition is not allowed because we sealed the module away under MAP interface
-/
const Map[Key]: MAP where Key: EQ = struct {
    Key: type = Key.Self,
    Map[Val]: type = Vec[{Key,Val}],

    empty[Val]: fn(): Map[Val] = Vec.empty() end,

    lookup[Val]: fn(map: Map[Val]^, ky: Key): Option[Val] =
        for {k,v} in map do
            if Key.eq(k, ky) then return Some(v) end
        end
        None
    end,

    add[Val]: fn(map: Map[Val]^uniq, ky: Key, vl: Val) =
        -- Don't bother with duplicates
        Vec.insert(map, {ky, vl})
    end,
}

--- Ok but as it says that is actually a functor, so we
--- need to make it a function and not a const value.
--- The type variable in the const decl is a clue, I guess.
--- For now we'll just call it a const function
--- and assume that's enough.
---
--- This breaks my brain a little 'cause it doesn't mention
--- freakin' ANYTHING about definining what type the value is,
--- it's just there.
const fn Map[Val](Key: EQ): MAP[Val] =
    struct {
        Key: type = Key.Self,
        Map[Val]: type = Vec[{Key,Val}],

        empty[Val] = fn(): Map[Val] = Vec.empty() end,

        lookup[Val] = fn(map: Map[Val]^, ky: Key): Option[Val] =
            for {k,v} in map do
                if Key.eq(k, ky) then return Some(v) end
            end
            None
        end,

        add[Val] = fn(map: Map[Val]^uniq, ky: Key, vl: Val) =
            -- Don't bother with duplicates
            Vec.insert(map, {ky, vl})
        end,
    }
end

fn actually_use_it_i_guess(): {} =
    -- Instantiate the module
    -- Hmm, we need an implementation of Eq for I32, that's an
    -- iiiiinteresting problem to represent...
    -- Do we have an I32.Eq impl?
    -- Do we have an Eq.I32 impl?
    -- Part of my annoyance with Rust is that the f32 modules and
    -- types are not the same thing, and here I am running into
    -- the same problem...
    -- (Though it looks like they are working on getting rid of that)
    -- I suppose part of my goal with this whole jazz is to make
    -- modules and types the same thing, so...
    const M: Map[String] = Map(I32.EQ)
    -- Actually do stuff with it
    let my_map: Map[String]^uniq = m.empty() ^uniq
    M.add(my_map, 1, "foo")
    M.add(my_map, 2, "bar")
    assert_eq(M.lookup(my_map, 1), "foo")
end

--- Ok it's a fresh new day, let's try again with a perennial favorite:
--- The From/Into traits.
--- These should be the same thing with just the LHS and RHS swapped,
--- so...
type CONVERT = struct {
    From: type,
    To: type,
    convert: fn(from: From^): To,
}

const I32ToF32: Convert = struct {
    From: I32,
    To: F32,
    convert: fn(from: From^): To = magic_goes_here(from) end,
}

const F32ToI32: Convert = struct {
    From: F32,
    To: I32,
    convert: fn(from: From^): To = magic_goes_here(from) end,
}

fn do_stuff(): F32 =
    I32ToF32.convert(42_I32)
end

type DEBUG = struct {
    Self: type,
    fmt: fn(Self^, Formatter ^uniq): Result[{}, Error],
}

type DEFAULT = struct {
    Self: type,
    default: fn(): Self,
}

--- pub trait PartialOrd<Rhs = Self>: PartialEq<Rhs>  hmmm
--- Like EQ we'll simplify Rhs and Lhs to just Self
--- Does this need to be a functor that takes an EQ as a param?
--- This is probably a good workout case.
---
--- Ok part of it is the trait definition above is an inheritance,
--- which we quite specifically don't have a way to specify, so
--- we specify it via inclusion for the moment.
--- No idea whether or not this actually works.
type ORD = struct {
    Eq: EQ,
    Self: Eq.Self,
    cmp: fn(Self^, Self^): Option[Ordering],
    lt: fn(Self^, Self^): Bool = ... end,
    le: fn(Self^, Self^): Bool = ... end,
    gt: fn(Self^, Self^): Bool = ... end,
    ge: fn(Self^, Self^): Bool = ... end,
}

type TO_STRING = struct {
    Self: type,
    to_string: fn(Self^): String,
}

type TRY_CONVERT = struct {
    From: type,
    To: type,
    convert: fn(from: From^): Option[To],
}

--- Ok now we want the actual Rust Hash trait, which takes a Hasher
--- So I guess it'll look something like this...
type HASH = struct {
    Self: type,
    hash: fn(Self^, Hasher^, HashState^uniq),
}

--- Really, a module constructor is a function that implements a trait
--- for you.  Hmmmm.
const fn MakeHash(t: type, hasher_impl: Hasher^): HASH =
    struct {
        Self: t,
        hash: fn(self: Self^, hash_state: hasher_impl.Self^uniq) = ... end
    }
end

--- Module full of methods for I32 type...
--- Convert, Debug, Default, Eq, Hash, Ord, ToString,
--- ToOwned, TryInto
const I32: ... = struct {
    Eq: EQ = struct {
        Self: I32,
        eq: fn(lhs: Self ^, rhs: Self ^): Bool = ... end
    },

    Ord: ORD = struct {
        Eq: I32.Eq,
        Self: I32.Eq.Self,

        cmp: fn(Self^, Self^): Option[Ordering] = ... end
    },

    ToString: TO_STRING = struct {
        Self: I32
        to_string: fn(self: Self^): String = ... end
    },

    Debug: DEBUG = struct {
        Self: I32,
        fmt: fn(Self&, Formatter ^uniq): Result[{}, Error] = ... end
    },

    Default: DEFAULT = struct {
        Self: I32,
        default: fn(): I32 = 0 end
    },


    ToF32: CONVERT = struct {
        From: I32,
        To: F32,
        convert: fn(from: From^): To = magic_goes_here(from) end,
    },

    --- We can do this as well and it's just fine, though
    --- really we should probably choose one and stick to it.
    FromF32: CONVERT = struct {
        From: F32,
        To: I32,
        convert: fn(from: From^): To = magic_goes_here(from) end,
    },

    TryToF32: CONVERT = struct {
        From: I32,
        To: F32,
        try_convert: fn(from: From^): Option[To] = magic_goes_here(from) end,
    },

    Hash: HASH = MakeHash(I32, SIPHASH_IMPL),
}

fn do_stuff(): F32 =
    I32.ToF32.convert(42_I32)
    Option.unwrap(I32.TryToF32.convert(43_I32))
end


-- I am firmly resisting the urge to do any syntactic sugar here.
-- BUT, some thoughts.
-- Maybe just add a __call__ function to a module so that if it has
-- only one function in it you can just call it.
-- So: `I32.ToF32.convert(42_I32)`
-- becomes `I32.ToF32(42_I32)`
--
-- That's probably a good idea.
--
-- A maybe-not-so-good idea is to be able to dispatch modules on
-- types if they match up:
-- `I32.ToF32(42)` becomes `42:ToF32()`
--
-- We'll have to work a bit more to see whether or not that is a good
-- idea.
--
-- The *thing* there is that it privileges the standard library.  The
-- user can't add more modules to the I32 type and have them work
-- the same way.

--- Ok let's try something more complicated: Iterator and IntoIterator
--- Note to self: everything under here is coffee-deprived BS, needs
--- rewriting.
type ITERATOR = struct {
    Self: type,
    Item: type,
    next: fn(self: Self^uniq): Option[Item],
}

--- ...For now I guess we pretend lifetimes don't exist.
type SliceIterator[T] = struct {
    slice: T[]^,
    idx: Size,
}
-- whoops we need a T for the array element, so
-- we need a functor...?
const fn ArrayIterator[T](): ITERATOR =
    struct {
        Self: SliceIterator[T],
        Item: T,
        next: fn(self: Self^uniq): Option[item] =
            if self.idx == self.slice.len then
                None
            else
                let itm = self.slice[self.idx]
                self.idx += 1
                itm
            end
        end
    }
end

/-
pub trait IntoIterator {
    type Item;
    type IntoIter: Iterator
    where
        <Self::IntoIter as Iterator>::Item == Self::Item;
    fn into_iter(self) -> Self::IntoIter;
}

:|
-/
type INTOITERATOR = struct {
    Self: type,
    Item: type,
    IntoIter: type,
    into_iter: fn(Self): IntoIter,
}

const fn IntoIterator(into_iter: ITERATOR): INTOITERATOR
where into_iter.Item == self.Item =
    struct {
        Self: ?,
        IntoIter: into_iter,
        Item: into_iter.Item,
    }
end

fn iterate_over_thing[T](thing: T[]^): {} =
    let ITER = ArrayIterator()
    let mut actual_iterator = ITER.into_iter(thing)
    for x in actual_iterator do
        print(x)
    end
end
