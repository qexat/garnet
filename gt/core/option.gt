--- Basic Option type
---
--- TODO:
--- Match syntax --
--- Sum type details -- patterh match syntax, etc.
--- Panics, strings...
--- module???

--- Properties: Copy, Clone, Debug, Zero, Pod when T is Pod...
type Option[T] = sum
    Some T,
    None {},
end

--- Properties: Panics.
fn unwrap(|T| self Option[T]) T =
    expect(self, "Unwrap failed")
end

--- Properties: Panics.
fn expect(|T| self Option[T], message Str) T =
    match self with
      | None {} -> panic(message)
      | Some val -> val
    end
end


fn unwrap_or(|T| self Option[T], val T) T =
    match self with
      | None {} -> val
      | Some val -> val
    end
end

fn unwrap_or_else(|T| self Option[T], f fn() T) T =
    match self with
      | None {} -> f()
      | Some val -> val
    end
end

fn cloned(|T| self Option[Borrow[T]] Option[T] where T: Clone =
    match self with
      | None {} -> None
      | Some val -> Some({T.clone(val)})
    end
end

fn is_some(|T| self Option[T]) Bool =
    match self with
      | None {} -> false
      | Some val -> true
	end
end

fn is_none(|T| self Option[T]) Bool =
	not is_some(self)
end

-- todo:
-- map, inspect, take, replace, 

-- Hmm, what would this look like as a module?
type Option[A] = struct[A]
	type T[A] = sum[A]
		Some A,
		None {},
	end

	fn unwrap(T) A,
	fn expect(T, Str) A,
	fn unwrap_or(T, A) A,
	fn unwrap_or_else(T, fn() A) A,
	fn cloned(Borrow(T)) T,
end
