-- Check:
--   status: success

-- Fine let's try something simpler.

type Eq(@Self) = struct
    eq: fn(@Self, @Self) Bool,
end

-- The name here has to be something other than Eq(I32) 'cause we
-- don't have specialization and we don't attach these names to
-- types in any way.
--
-- To ponder: What if we did attach names to types, or had
-- specialization?  The latter evokes the Instance Problem, the former
-- I suppose is a way around it.
const IntEq = $Eq(I32) {
    .eq = fn(lhs I32, rhs I32) Bool =
        true
    end,
}

type Ord(@Self) = struct
    cmp: fn(@Self, @Self) I32,
end

const IntOrd = $Ord(I32) {
    .cmp = fn(lhs I32, rhs I32) I32 =
        0
    end,
}


type From(@Self, @In) = struct
    from: fn(@In) @Self
end

const BoolFromInt = $From(Bool, I32) {
    .from = fn(i I32) Bool = false end
}

type List(@T) = struct
    dummy_data: @T,
end


type Idx(@Self, @Output) = struct
    idx: fn(@Self, I32) @Output,
end

type Len(@Self) = struct
    len: fn(@Self) I32,
end

const ListLen = $Len(List(@T)) {
    .len = fn(self List(@T)) I32 = 0 end
}

fn module_len(impl Len(@T), l @T) I32 =
    let total I32 = 0
    impl$.len(l)
end

-- Specialize it just to make sure everything fits together...
fn list_len(l List(@T)) I32 =
    module_len(ListLen, l)
end

const ListIdx = $Idx(List(@T), @T) {
    .idx = fn(self List(@T), i I32) @T = self$.dummy_data end
}

-- Generalized thingy...
fn idx(l List(@T)) @T =
    let total I32 = 3
    ListIdx$.idx(l, total)
end

-- Can we make another instance for a more specialized type?
const IntListIdx = $Idx(List(I32), I32) {
    .idx = fn(self List(I32), i I32) I32 = self$.dummy_data end
}

