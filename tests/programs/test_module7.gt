-- Format:
--   status: success
-- Compile:
--   status: error
-- Run:
--   stdout: 12

-- TODO: This should pass when the `monomorph` branch is finished.

/- Another monad-ish attempt, this also gets called map
From modular implicits paper section 3.4

To make this work we need closures that capture their scope properly.

module type Functor = sig
  type + 'a t
  val map : ('a -> 'b) -> 'a t -> 'b t
end
-/

type Functor(T1, T2) = struct
    map: fn(T1) T2,
end

-- Implement Map for a cell type
type Cell(V) = struct
    val: V
end

fn make_cell_functor(f fn(A) B) Functor(Cell(A), Cell(B)) =
    -- to work this needs closures, 'cause it
    -- captures f()
    let m = fn(c Cell(A)) Cell(B) =
        Cell({
            .val = f(c$.val)
        })
    end
    Functor({
        .map = m,
    })
end

/-
fn f(i Bool) I32 =
    12
end
-/

fn main() {} =
    {}
    /-
    let test_cell Cell(Bool) = Cell {
        .val = true
    }
    let thing = make_cell_functor(f)
    let test_result Cell(I32) = thing$.map(test_cell)
    __println(test_result$.val)
    -/
end
