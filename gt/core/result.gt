--- Basic Result type
---
--- TODO:
--- Panics, strings...

--- Our general-purpose Result type.
--- Properties: Copy, Clone, Debug, Zero, Pod when T is Pod...
type Result[T, E] = sum[T, E]
	Ok {T}, 
	Err {E},
end

--- Takes a Result and returns the value contained if it is Ok, 
--- otherwise panics.
---
--- Properties: Panics.
fn unwrap(|T, E| self Result[T, E]) T =
    expect(self, "Unwrap failed")
end

--- Takes a Result and returns the value contained if it is Ok, 
--- otherwise panics with the given message
---
--- TODO: I honestly kinda don't like how hard it is to stick a sane
--- format string in here in Rust, where you have to do
--- `thing.expect_with(|e| format!("help I got an {}", e))`.
--- But that's a problem for Future Garnet.
---
--- Properties: Panics.
fn expect(|T, E| self Result[T, E], message Str) T =
    match self with
      | Err{_} -> panic(message)
      | Ok{val} -> val
    end
end


fn unwrap_or(|T, E| self Result[T, E], val T) T =
    match self with
      | Err{_} -> val
      | Ok{val} -> val
    end
end

fn unwrap_or_else(|T, E| self Result[T, E], f fn() T) T =
    match self with
      | Err{_} -> f()
      | Ok{val} -> val
    end
end

fn is_ok(|T, E| self Result[T, E]) Bool =
    match self with
      | Ok{_} -> true
      | Err{_} -> false
    end
end

fn is_err(|T, E| self Result[T, E]) Bool =
	not is_ok(self)
end

--- Transforms a `Result[T, E]` into an `Option[T]`
fn ok(|T, E| self Result[T, E]) Option[T] =
    match self with
      | Ok{val} -> Some(val)
      | Err{_} -> None {}
    end
end

--- Transforms a `Result[T, E]` into an `Option(E)`
fn err(|T, E| self Result[T, E]) Option[E] =
    match self with
      | Ok{_} -> None {}
      | Err{val} -> Some val
    end
end
