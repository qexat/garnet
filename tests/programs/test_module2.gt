-- Format:
--   status: success
-- Compile:
--   status: success
-- Run:
--   status: success
--   stdout: 3

-- Dummy type
type String = I32

-- TODO: Make the compiler mangle "Self" since it's a keyword in Rust
-- Also "self" and "impl"
type Show[Self] = struct[Self]
    show: fn(Self) String
end

-- To make this work we need monomorphization, 'cause Rust refuses to
-- call a function pointer in a const function
const IntShow Show[I32] = Show {
    .show = fn(x I32) String = String(x) end
}

fn show(|T| show Show[T], val T) String =
  show$.show(val)
end


fn main() {} =
    let s String = show(IntShow, 3)
    __println(s$)

end
